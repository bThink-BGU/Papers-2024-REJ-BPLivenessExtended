# -*- coding: utf-8 -*-
"""task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i05U7S9LuriwTXAsHRCavGFZEMFk3dm5
"""

# Don't touch this b-thread
@thread
def bt_1():
    for i in range(5):
        yield {waitFor: [Up, Down, Left, Right]}
    yield {block: [Up, Down, Left, Right]}

# Enter your solution below
LeftWalls = [At11, At21, At31, At23]
RightWalls = [At13, At23, At33, At21]
UpperWalls = [At11, At12, At13, At32]
LowerWalls = [At31, At32, At33, At12]
e = At11

stepsLeft = 5

@thread
def bt_LeftCheck():
    while True:
        if e in LeftWalls:
            e = yield {waitFor: AnyAt, block: Left}
@thread
def bt_RightCheck():
    while True:
        if e in RightWalls:
            e = yield {waitFor: AnyAt, block: Right}

@thread
def bt_UpCheck():
    while True:
        if e in UpperWalls:
          e = yield {waitFor: AnyAt, block: Up}

@thread
def bt_DownCheck():
    while True:
        if e in LowerWalls:
          e = yield {waitFor: AnyAt, block: Down}

@thread
def bt_Distance1Check():
    while True:
      if stepsLeft == 1:
        if e == At13:
          e = yield {waitFor: AnyAt, block: Left}
        elif e == At33:
          e = yield {waitFor: AnyAt, block: Left}

@thread
def bt_Distance2Check():
    while True:
      if stepsLeft == 2:
        if e == At12:
          e = yield {waitFor: AnyAt, block: Left}
        elif e == At32:
          e = yield {waitFor: AnyAt, block: Left}

@thread
def bt_Distance3Check():
    while True:
      if stepsLeft == 3:
        if e == At11:
          e = yield {waitFor: AnyAt, block: Down}
        elif e == At31:
          e = yield {waitFor: AnyAt, block: Up}

@thread
def bt_run():
    while True:
      yield {request: [Up, Down, Left, Right]}
      stepsLeft = stepsLeft - 1